<?php declare(strict_types=1);

namespace Stefna\PhpCodeBuilder;

use Stefna\PhpCodeBuilder\ValueObject\Identifier;

/**
 * Class that represents the source code for a class in php
 *
 * @author Fredrik Wallgren <fredrik.wallgren@gmail.com>
 * @author Andreas Sundqvist <andreas@stefna.is>
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
class PhpClass extends PhpTrait
{
	protected const TYPE = 'class';

	private ?Identifier $extends = null;
	/** @var Identifier[] */
	private array $implements = [];

	/**
	 * @param Identifier[] $implements
	 */
	public function __construct(
		Identifier|string $identifier,
		Identifier|string|null $extends = null,
		PhpDocComment|null $comment = null,
		private bool $final = false,
		private bool $abstract = false,
		array $implements = [],
		private bool $readOnly = false,
	) {
		parent::__construct(Identifier::fromUnknown($identifier), $comment);
		if ($extends) {
			$this->setExtends($extends);
		}
		foreach ($implements as $implement) {
			$this->addInterface($implement);
		}
	}

	public function addMethod(PhpMethod $method): static
	{
		if ($method->isAbstract() && !$this->abstract) {
			throw new \BadMethodCallException('Can\'t add "abstract" method to none abstract class');
		}
		return parent::addMethod($method); // TODO: Change the autogenerated stub
	}

	public function setAbstract(): static
	{
		$this->abstract = true;
		return $this;
	}

	public function setFinal(): static
	{
		$this->final = true;
		return $this;
	}

	public function setReadOnly(): static
	{
		$this->readOnly = true;
		return $this;
	}

	public function addInterface(Identifier|string $interface): static
	{
		$identifier = Identifier::fromUnknown($interface);
		$this->addUse($identifier);
		$this->implements[] = $identifier;

		return $this;
	}

	public function addTrait(string $trait): self
	{
		$this->traits[] = Identifier::fromString($trait);
		return $this;
	}

	public function setExtends(Identifier|string $extends): self
	{
		$extends = Identifier::fromUnknown($extends);
		$this->addUse($extends);
		$this->extends = $extends;
		return $this;
	}

	public function getExtends(): ?Identifier
	{
		return $this->extends;
	}

	/**
	 * @return Identifier[]
	 */
	public function getImplements(): array
	{
		return $this->implements;
	}

	public function isFinal(): bool
	{
		return $this->final;
	}

	public function isAbstract(): bool
	{
		return $this->abstract;
	}

	public function isReadOnly(): bool
	{
		return $this->readOnly;
	}
}
